#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <SFML/System.hpp>
#include <cstdlib>
#include <ctime>
#include <vector>
#include <iostream> // Untuk menampilkan pesan di console

int main() {
    // Inisialisasi random seed
    std::srand(static_cast<unsigned>(std::time(nullptr)));

    // Buat window
    sf::RenderWindow window(sf::VideoMode(800, 600), "Avoid the Walls!");

    // Buat pemain (sebuah persegi)
    sf::RectangleShape player(sf::Vector2f(50.0f, 50.0f));
    player.setFillColor(sf::Color::Green);
    player.setPosition(375.0f, 275.0f); // Posisi awal

    // Kecepatan pemain
    float playerSpeed = 250.0f;

    // Buat dinding (persegi panjang yang bergerak)
    std::vector<sf::RectangleShape> walls;
    float wallSpeed = 150.0f;

    // Timer untuk menambahkan dinding baru
    sf::Clock wallClock;
    sf::Time timeSinceLastWall = sf::Time::Zero;

    // Status permainan
    bool gameOver = false;

    // Main loop
    sf::Clock clock;
    while (window.isOpen()) {
        sf::Time deltaTime = clock.restart();
        sf::Event event;

        // Proses event
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            // Restart game jika game over dan tekan tombol "R"
            if (gameOver && sf::Keyboard::isKeyPressed(sf::Keyboard::R)) {
                gameOver = false;
                player.setPosition(375.0f, 275.0f); // Reset posisi pemain
                walls.clear(); // Hapus semua dinding
            }
        }

        if (!gameOver) {
            // Input gerakan pemain
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Up)) {
                player.move(0, -playerSpeed * deltaTime.asSeconds());
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Down)) {
                player.move(0, playerSpeed * deltaTime.asSeconds());
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Left)) {
                player.move(-playerSpeed * deltaTime.asSeconds(), 0);
            }
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Right)) {
                player.move(playerSpeed * deltaTime.asSeconds(), 0);
            }

            // Batasi gerakan pemain agar tidak keluar dari layar
            if (player.getPosition().x < 0) {
                player.setPosition(0, player.getPosition().y);
            }
            if (player.getPosition().x + player.getSize().x > 800) {
                player.setPosition(800 - player.getSize().x, player.getPosition().y);
            }
            if (player.getPosition().y < 0) {
                player.setPosition(player.getPosition().x, 0);
            }
            if (player.getPosition().y + player.getSize().y > 600) {
                player.setPosition(player.getPosition().x, 600 - player.getSize().y);
            }

            // Tambahkan dinding secara berkala
            timeSinceLastWall += deltaTime;
            if (timeSinceLastWall.asSeconds() > 1.0f) {
                sf::RectangleShape wall(sf::Vector2f(100.0f, 20.0f));
                wall.setFillColor(sf::Color::Red);
                wall.setPosition(static_cast<float>(std::rand() % 700), 0.0f); // Random posisi di atas layar
                walls.push_back(wall);
                timeSinceLastWall = sf::Time::Zero;
            }

            // Update posisi dinding (dinding bergerak ke bawah)
            for (auto& wall : walls) {
                wall.move(0, wallSpeed * deltaTime.asSeconds());
            }

            // Cek tabrakan antara pemain dan dinding
            for (const auto& wall : walls) {
                if (player.getGlobalBounds().intersects(wall.getGlobalBounds())) {
                    gameOver = true;
                    std::cout << "Game Over! Press R to Restart" << std::endl;
                }
            }

            // Hapus dinding yang sudah keluar dari layar
            walls.erase(std::remove_if(walls.begin(), walls.end(),
                [](const sf::RectangleShape& wall) {
                    return wall.getPosition().y > 600;
                }), walls.end());
        }

        // Bersihkan window
        window.clear();

        // Gambar objek
        window.draw(player);
        for (const auto& wall : walls) {
            window.draw(wall);
        }

        // Tampilkan hasil
        window.display();
    }

    return 0;
}
